name: CI/CD Pipeline

on:
  push:
    branches:
      - feat/*

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: 376129840316.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: nhj-server
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정 (OpenJDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Gradle 캐시 정리
      - name: Clean Gradle Cache
        run: ./gradlew clean

      # 4. 애플리케이션 빌드 (Gradle 사용)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. AWS 로그인 (ECR)
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      # 8. Docker 이미지 푸시
      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 9. ECS 배포를 위한 task-definition 생성
      - name: Render ECS Task Definition
        id: render-task-def
        run: |
          cat <<EOF > task-def.json
          {
            "family": "ecs-task-family",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "ECS-TASK-CONTAINER",
                "image": "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}",
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "environment": [
                  { "name": "JWT_SECRET_KEY", "value": "${{ secrets.JWT_SECRET_KEY }}" },
                  { "name": "RDS_DB_NAME", "value": "${{ secrets.RDS_DB_NAME }}" },
                  { "name": "RDS_HOST", "value": "${{ secrets.RDS_HOST }}" },
                  { "name": "RDS_PASSWORD", "value": "${{ secrets.RDS_PASSWORD }}" },
                  { "name": "RDS_USERNAME", "value": "${{ secrets.RDS_USERNAME }}" },
                  { "name": "REDIS_HOST", "value": "${{ secrets.REDIS_HOST }}" },
                  { "name": "REDIS_PORT", "value": "${{ secrets.REDIS_PORT }}" },
                  { "name": "AWS_S3_BUCKET", "value": "${{ secrets.AWS_S3_BUCKET }}" },
                  { "name": "AWS_SQS_QUEUE_URL", "value": "${{ secrets.AWS_SQS_QUEUE_URL }}" },
                  { "name": "spring.profiles.active", "value": "prod" }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/ECS-SERVICE",
                    "awslogs-region": "ap-northeast-2",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::376129840316:role/ecs-Task-Execution-Role",
            "taskRoleArn": "arn:aws:iam::376129840316:role/Ecs-Task-Role"
          }
          EOF

      # 10. ECS 서비스 업데이트 및 배포
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-def.json
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true